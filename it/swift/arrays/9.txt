<section id="options">
{
"language": "swift",
"type": "fillEmptySpaces"
}
</section>
<section id="description">
A volte Ã¨ necessario cercare un elemento in un array.
In Swift possiamo usare il metodo `firstIndex()`:
```
var nomi: [String] = ["Trevor", "Zac", "Glenn"]
if let indice = nomi.firstIndex(of: "Zac") {
  print(indice)
}
// stampa 1
```
Il codice qui sopra stampa il primo indice che contiene la stringa `"Zac"`, `1` in questo caso.
Possiamo anche inserire elementi in un'array in un indice specifico, usando il metodo `insert()`:
```
nomi.insert("Ali", at: 1)
// stampa ["Trevor", "Ali", "Zac", "Glenn"]
```
Il codice qui sopra inserisce `"Ali"` all'indice `1`, e incrementa l'indice di 1 a tutti gli elementi che lo seguono
</section>
<section id="instructions">
- Utilizza il metodo `firstIndex()` per stampare l'indice di `"cane"`.
- usa il metodo `insert()` per aggiungere`"orso"` come primo elemento dell'array
</section>
<section id="fillEmptySpaces">
{
    "seed": ["var animali = [\"gatto\", \"scimmia\", \"cane\"]\nif let i = animali.", "[/]", "(of: ", "[/]", ") {\n\tprint(i)\n}\nanimali.", "[/]", "(\"orso\", at: ","[/]", ")\nprint(animali)"],
	"buttons": ["index", "firstIndex","cane","\"cane\"", "insert", "append", "add", "0", "1"],
	"correct": "var animali = [\"gatto\", \"scimmia\", \"cane\"]\nif let i = animali.firstIndex(of: \"cane\") {\n\tprint(i)\n}\nanimali.insert(\"orso\", at: 0)\nprint(animali)"
}
</section>
<section id="preOutput">
2
["orso", "gatto", "scimmia", "cane"]
</section>