<section id="options">
{
"language": "swift",
"type": "runCode",
"showRun": true
}
</section>

<section id="description">
Il tuo compito e' quello di convertiire un numero in una stringa che contiene suoni di gocce di pioggia corrispondenti a determinati fattori potenziali.
Un fattore e' un numero che si divide uniformemente in un altro numero, senza lasciare alcun resto.
Il modo piu' semplice per verificare se un numero e' un fattore di un altro e' utilizzare l'operazione modulo.
Le regole delle gocce di pioggia sono che se un dato numero:

- ha 3 come fattore, aggiungi 'Pling' al risultato.
- ha 5 come fattore, aggiungi 'Plang' al risultato.
- ha 7 come fattore, aggiungi 'Plong' al risultato.
- non ha 3, 5 o 7 come fattore, il risultato dovrebbe essere costituito dalle cifre del numero.
</section>

<section id="instructions">
Scrivi una funzione che restituisca la stringa corretta, ad esempio:

- 28 ha 7 come fattore, ma non 3 o 5, quindi il risultato e' `Plong`.
- 30 ha sia 3 che 5 come fattori, ma non 7, quindi il risultato e' `PlingPlang`.
- 34 non e' fattorizzato da 3, 5, o 7, quindi il risultato e' "34".
<section id="seed">
</section>

<section id="test">
import XCTest

class RaindropsTests: XCTestCase {
    func test1() {
        XCTAssertEqual("1", Raindrops(1).sounds)
    }

    func test3() {
        XCTAssertEqual("Pling", Raindrops(3).sounds)
    }

    func test5() {
        XCTAssertEqual("Plang", Raindrops(5).sounds)
    }

    func test7() {
        XCTAssertEqual("Plong", Raindrops(7).sounds)
    }

    func test6() {
        XCTAssertEqual("Pling", Raindrops(6).sounds)
    }

    func test9() {
        XCTAssertEqual("Pling", Raindrops(9).sounds)
    }

    func test10() {
        XCTAssertEqual("Plang", Raindrops(10).sounds)
    }

    func test14() {
        XCTAssertEqual("Plong", Raindrops(14).sounds)
    }

    func test15() {
        XCTAssertEqual("PlingPlang", Raindrops(15).sounds)
    }

    func test21() {
        XCTAssertEqual("PlingPlong", Raindrops(21).sounds)
    }

    func test25() {
        XCTAssertEqual("Plang", Raindrops(25).sounds)
    }

    func test35() {
        XCTAssertEqual("PlangPlong", Raindrops(35).sounds)
    }

    func test49() {
        XCTAssertEqual("Plong", Raindrops(49).sounds)
    }

    func test52() {
        XCTAssertEqual("52", Raindrops(52).sounds)
    }

    func test105() {
        XCTAssertEqual("PlingPlangPlong", Raindrops(105).sounds)
    }

    func test12121() {
        XCTAssertEqual("12121", Raindrops(12_121).sounds)
    }

    static var allTests: [(String, (RaindropsTests) -> () throws -> Void)] {
        return [
            ("test1", test1),
            ("test3", test3),
            ("test5", test5),
            ("test7", test7),
            ("test6", test6),
            ("test9", test9),
            ("test10", test10),
            ("test14", test14),
            ("test15", test15),
            ("test21", test21),
            ("test25", test25),
            ("test35", test35),
            ("test49", test49),
            ("test52", test52),
            ("test105", test105),
            ("test12121", test12121),
        ]
    }
}
XCTMain([testCase(RaindropsTests.allTests),])
</section>