<section id="options">
{
"language": "swift",
"type": "runCode",
"showRun": true
}
</section>

<section id="description">
Dato un nome, restituire una stringa con il messaggio:
`Uno per X, uno per me.`
Dove `X` e' il nome dato.
Tuttavia, se il nome manca, restituire la stringa:
`Uno per te, uno per me.`
</section>

<section id="instructions">
Scrivi una funzione che restituisca la stringa corretta, ad esempio:

**input**: `Walter`
**output**: `Uno per Walter, uno per me.`

**input**: `James`
**output**: `Uno per James, uno per me.`

**input**: `Martha`
**output**: `Uno per Martha, uno per me.`
</section>

<section id="seed">
func due_per_uno(name: String) -> String {
    
}
</section>

<section id="test">
import XCTest

class HelloWorldTests: XCTestCase {

    func test_no_name_given() {
        let expected = "Uno per te, uno per me."
        XCTAssertEqual(due_per_uno(), expected)
    }

    func test_a_name_given() {
        let expected = "Uno per James, uno per me."
        XCTAssertEqual(due_per_uno(name: "James"), expected)
    }

    func test_another_name_given() {
        let expected = "Uno per Martha, uno per me."
        XCTAssertEqual(due_per_uno(name: "Martha"), expected)
    }

    static var allTests: [(String, (HelloWorldTests) -> () throws -> Void)] {
        return [
            ("test_no_name_given", test_no_name_given),
            ("test_a_name_given", test_a_name_given),
            ("test_another_name_given", test_another_name_given),
        ]
    }
}

XCTMain([testCase(HelloWorldTests.allTests),])
</section>