<section id="options">
{
"language": "python",
"type": "runCode",
"showRun": true
}
</section>

<section id="description">
Il tuo compito e' quello di convertiire un numero in una stringa che contiene suoni di gocce di pioggia corrispondenti a determinati fattori potenziali.
Un fattore e' un numero che si divide uniformemente in un altro numero, senza lasciare alcun resto.
Il modo piu' semplice per verificare se un numero e' un fattore di un altro e' utilizzare l'operazione modulo.
Le regole delle gocce di pioggia sono che se un dato numero:

- ha 3 come fattore, aggiungi 'Pling' al risultato.
- ha 5 come fattore, aggiungi 'Plang' al risultato.
- ha 7 come fattore, aggiungi 'Plong' al risultato.
- non ha 3, 5 o 7 come fattore, il risultato dovrebbe essere costituito dalle cifre del numero.
</section>

<section id="instructions">
Scrivi una funzione che restituisca la stringa corretta, ad esempio:

- 28 ha 7 come fattore, ma non 3 o 5, quindi il risultato e' `Plong`.
- 30 ha sia 3 che 5 come fattori, ma non 7, quindi il risultato e' `PlingPlang`.
- 34 non e' fattorizzato da 3, 5, o 7, quindi il risultato e' "34".
<section id="seed">
def converti(num):
	pass
</section>

<section id="test">
import unittest

from raindrops import converti

class RaindropsTest(unittest.TestCase):
    def test_the_sound_for_1_is_1(self):
        self.assertEqual(converti(1), "1")

    def test_the_sound_for_3_is_pling(self):
        self.assertEqual(converti(3), "Pling")

    def test_the_sound_for_5_is_plang(self):
        self.assertEqual(converti(5), "Plang")

    def test_the_sound_for_7_is_plong(self):
        self.assertEqual(converti(7), "Plong")

    def test_the_sound_for_6_is_pling_as_it_has_a_factor_3(self):
        self.assertEqual(converti(6), "Pling")

    def test_2_to_the_power_3_does_not_make_a_raindrop_sound_as_3_is_the_exponent_not_the_base(
        self
    ):
        self.assertEqual(converti(8), "8")

    def test_the_sound_for_9_is_pling_as_it_has_a_factor_3(self):
        self.assertEqual(converti(9), "Pling")

    def test_the_sound_for_10_is_plang_as_it_has_a_factor_5(self):
        self.assertEqual(converti(10), "Plang")

    def test_the_sound_for_14_is_plong_as_it_has_a_factor_of_7(self):
        self.assertEqual(converti(14), "Plong")

    def test_the_sound_for_15_is_pling_plang_as_it_has_factors_3_and_5(self):
        self.assertEqual(converti(15), "PlingPlang")

    def test_the_sound_for_21_is_pling_plong_as_it_has_factors_3_and_7(self):
        self.assertEqual(converti(21), "PlingPlong")

    def test_the_sound_for_25_is_plang_as_it_has_a_factor_5(self):
        self.assertEqual(converti(25), "Plang")

    def test_the_sound_for_27_is_pling_as_it_has_a_factor_3(self):
        self.assertEqual(converti(27), "Pling")

    def test_the_sound_for_35_is_plang_plong_as_it_has_factors_5_and_7(self):
        self.assertEqual(converti(35), "PlangPlong")

    def test_the_sound_for_49_is_plong_as_it_has_a_factor_7(self):
        self.assertEqual(converti(49), "Plong")

    def test_the_sound_for_52_is_52(self):
        self.assertEqual(converti(52), "52")

    def test_the_sound_for_105_is_pling_plang_plong_as_it_has_factors_3_5_and_7(self):
        self.assertEqual(converti(105), "PlingPlangPlong")

    def test_the_sound_for_3125_is_plang_as_it_has_a_factor_5(self):
        self.assertEqual(converti(3125), "Plang")


if __name__ == "__main__":
    unittest.main(exit=False)

</section>