<section id="options">
{
"language": "c",
"type": "fillEmptySpaces"
}
</section>
<section id="description">
Functions can have multiple input parameters, which are written within the function's parentheses, separated by commas.
```
void say_hello(char *name, bool new_user) {
  char greet[40] = "Hello ";
  strcat(greet, name);
  if (new_user) {
    strcat(greet, "! Welcome on board :)");
  }
  printf("%s\n", greet);
}

int main(void) {
    // prints "Hello Tom"
    say_hello("Tom", true);
    return 0;
};
```
</section>
<section id="instructions">
Complete the code in order to create a valid function called `say_hello` passing `true` to the second parameter and print the result
</section>
<section id="fillEmptySpaces">
{
	"seed": ["void ", "[/]", "(char *name, ", "[/]", "[/]", ") {\n\tchar greet[40] = \"Hello \";\n\t// used to concatenate the strings\n\tstrcat(greet, name);\n\tif (new_user) {\n\t  strcat(greet, \"! Welcome on board :)\");\n\t}\n\tprintf(\"%s\\n\", greet);\n}\n\nint main(void) {\n\tsay_hello(\"Smith\", true);\n\treturn 0;\n}"],
	"buttons": ["say_hello", "bool ", "new_user", "string "],
	"correct": "void say_hello(char *name, bool new_user) {\n\tchar greet[40] = \"Hello \";\n\t// used to concatenate the strings\n\tstrcat(greet, name);\n\tif (new_user) {\n\t  strcat(greet, \"! Welcome on board :)\");\n\t}\n\tprintf(\"%s\\n\", greet);\n}\n\nint main(void) {\n\tsay_hello(\"Smith\", true);\n\treturn 0;\n}"
}
</section>
<section id="preOutput">
Hello Tom! Welcome on board :)
</section>