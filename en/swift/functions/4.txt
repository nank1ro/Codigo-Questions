<section id="options">
{
"language": "swift",
"type": "fillEmptySpaces"
}
</section>
<section id="description">
Functions can have multiple input parameters, which are written within the function's parentheses, separated by commas.
```
func sayHello(name: String, newUser: Bool) -> String {
  var greet: String = "Hello \(name)!"
  if (newUser) {
    greet += " Welcome on board :)"
  }
  return greet
}
// prints "Hello Smith! Welcome on board :)"
print(sayHello(name: "Smith", newUser: true))
```
</section>
<section id="instructions">
Complete the code in order to create a valid function called `sumAllNumbers` passing the following array of numbers `[15, 24, 31, 79]` and `true` to print the result
</section>
<section id="fillEmptySpaces">
{
    "seed": ["func sumAllNumbers(_ nums: [Int], _ printResult: Bool) -> Int {\n\t/* The reduce method is used to add up all the numbers, starting from 0 and using the + sign\n\t*/\n\tlet result = nums.reduce(0, +)\n\tif ","[/]"," { print(result) }\n\treturn result\n}\nlet result = ","[/]","(","[/]","15, 24, 31, ","[/]","[/]",", ","[/]",")"],
	"buttons": ["sumAllNumbers","sum","79","]","[","true","false","True","printResult","print","true"],
	"correct": "func sumAllNumbers(_ nums: [Int], _ printResult: Bool) -> Int {\n\t/* The reduce method is used to add up all the numbers, starting from 0 and using the + sign\n\t*/\n\tlet result = nums.reduce(0, +)\n\tif printResult { print(result) }\n\treturn result\n}\nlet result = sumAllNumbers([15, 24, 31, 79], true)"
}
</section>
<section id="preOutput">
149
</section>